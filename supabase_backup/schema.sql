


SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";





SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."BucketInstances" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "bucket_metadata_id" "uuid" DEFAULT "gen_random_uuid"(),
    "start" timestamp with time zone NOT NULL,
    "end" timestamp with time zone NOT NULL
);


ALTER TABLE "public"."BucketInstances" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."BucketMetadata" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" character varying,
    "recurrence_period_type" integer,
    "spending_limit" numeric,
    "user_id" "uuid",
    "hidden_at" timestamp with time zone
);


ALTER TABLE "public"."BucketMetadata" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."ChallengeMemberships" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "challenge_id" "uuid",
    "user_id" "uuid"
);


ALTER TABLE "public"."ChallengeMemberships" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."Challenges" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" character varying NOT NULL,
    "start" timestamp with time zone NOT NULL,
    "end" timestamp with time zone,
    "amount" numeric NOT NULL,
    "description" character varying,
    "owner" "uuid"
);


ALTER TABLE "public"."Challenges" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."Expenses" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "amount" numeric NOT NULL,
    "description" character varying,
    "name" character varying NOT NULL,
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "user_id" "uuid" DEFAULT "gen_random_uuid"(),
    "bucket_instance_id" "uuid" DEFAULT "gen_random_uuid"(),
    "settle_split_id" "uuid",
    "challenge_id" "uuid"
);


ALTER TABLE "public"."Expenses" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."GroupMemberships" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "group_id" "uuid" NOT NULL
);


ALTER TABLE "public"."GroupMemberships" OWNER TO "postgres";


ALTER TABLE "public"."GroupMemberships" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."GroupMembership_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."Groups" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" character varying NOT NULL,
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL
);


ALTER TABLE "public"."Groups" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."Splits" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "original_expense_id" "uuid",
    "amount_owed" numeric,
    "amount_remaining" numeric,
    "user_id" "uuid",
    "group_id" "uuid"
);


ALTER TABLE "public"."Splits" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."Users" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" character varying
);


ALTER TABLE "public"."Users" OWNER TO "postgres";


ALTER TABLE ONLY "public"."BucketInstances"
    ADD CONSTRAINT "BucketInstances_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."BucketMetadata"
    ADD CONSTRAINT "BucketMetadata_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."ChallengeMemberships"
    ADD CONSTRAINT "ChallengeMemberships_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Challenges"
    ADD CONSTRAINT "Challenges_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Splits"
    ADD CONSTRAINT "ExpenseSplits_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Expenses"
    ADD CONSTRAINT "Expenses_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."GroupMemberships"
    ADD CONSTRAINT "GroupMembership_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Groups"
    ADD CONSTRAINT "Groups_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Users"
    ADD CONSTRAINT "Users_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."BucketInstances"
    ADD CONSTRAINT "BucketInstances_bucket_metadata_id_fkey" FOREIGN KEY ("bucket_metadata_id") REFERENCES "public"."BucketMetadata"("id") ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."BucketMetadata"
    ADD CONSTRAINT "BucketMetadata_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."Users"("id") ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."ChallengeMemberships"
    ADD CONSTRAINT "ChallengeMemberships_challenge_id_fkey" FOREIGN KEY ("challenge_id") REFERENCES "public"."Challenges"("id") ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."ChallengeMemberships"
    ADD CONSTRAINT "ChallengeMemberships_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."Users"("id") ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."Expenses"
    ADD CONSTRAINT "Expenses_bucket_instance_id_fkey" FOREIGN KEY ("bucket_instance_id") REFERENCES "public"."BucketInstances"("id") ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."Expenses"
    ADD CONSTRAINT "Expenses_challenge_id_fkey" FOREIGN KEY ("challenge_id") REFERENCES "public"."Challenges"("id") ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."Expenses"
    ADD CONSTRAINT "Expenses_settle_split_id_fkey" FOREIGN KEY ("settle_split_id") REFERENCES "public"."Splits"("id") ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."GroupMemberships"
    ADD CONSTRAINT "GroupMembership_group_id_fkey" FOREIGN KEY ("group_id") REFERENCES "public"."Groups"("id") ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."GroupMemberships"
    ADD CONSTRAINT "GroupMemberships_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."Users"("id") ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."Splits"
    ADD CONSTRAINT "Splits_group_id_fkey" FOREIGN KEY ("group_id") REFERENCES "public"."Groups"("id") ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."Splits"
    ADD CONSTRAINT "Splits_original_expense_id_fkey" FOREIGN KEY ("original_expense_id") REFERENCES "public"."Expenses"("id") ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."Splits"
    ADD CONSTRAINT "Splits_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."Users"("id") ON DELETE RESTRICT;



CREATE POLICY "Enable insert for users based on user_id" ON "public"."Expenses" FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable read access for all users" ON "public"."BucketInstances" FOR SELECT USING (true);





ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";








































































































































































GRANT ALL ON TABLE "public"."BucketInstances" TO "anon";
GRANT ALL ON TABLE "public"."BucketInstances" TO "authenticated";
GRANT ALL ON TABLE "public"."BucketInstances" TO "service_role";



GRANT ALL ON TABLE "public"."BucketMetadata" TO "anon";
GRANT ALL ON TABLE "public"."BucketMetadata" TO "authenticated";
GRANT ALL ON TABLE "public"."BucketMetadata" TO "service_role";



GRANT ALL ON TABLE "public"."ChallengeMemberships" TO "anon";
GRANT ALL ON TABLE "public"."ChallengeMemberships" TO "authenticated";
GRANT ALL ON TABLE "public"."ChallengeMemberships" TO "service_role";



GRANT ALL ON TABLE "public"."Challenges" TO "anon";
GRANT ALL ON TABLE "public"."Challenges" TO "authenticated";
GRANT ALL ON TABLE "public"."Challenges" TO "service_role";



GRANT ALL ON TABLE "public"."Expenses" TO "anon";
GRANT ALL ON TABLE "public"."Expenses" TO "authenticated";
GRANT ALL ON TABLE "public"."Expenses" TO "service_role";



GRANT ALL ON TABLE "public"."GroupMemberships" TO "anon";
GRANT ALL ON TABLE "public"."GroupMemberships" TO "authenticated";
GRANT ALL ON TABLE "public"."GroupMemberships" TO "service_role";



GRANT ALL ON SEQUENCE "public"."GroupMembership_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."GroupMembership_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."GroupMembership_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."Groups" TO "anon";
GRANT ALL ON TABLE "public"."Groups" TO "authenticated";
GRANT ALL ON TABLE "public"."Groups" TO "service_role";



GRANT ALL ON TABLE "public"."Splits" TO "anon";
GRANT ALL ON TABLE "public"."Splits" TO "authenticated";
GRANT ALL ON TABLE "public"."Splits" TO "service_role";



GRANT ALL ON TABLE "public"."Users" TO "anon";
GRANT ALL ON TABLE "public"."Users" TO "authenticated";
GRANT ALL ON TABLE "public"."Users" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";































RESET ALL;
